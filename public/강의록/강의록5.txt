Props

: 한 파일에 있더라도 다른 컴포넌트는 다른 function으로 지정됨 (당빠 state는 그 function 지역변수임)

: 호출된 하위(자식) 컴포넌트에서 상위(부모) 컴포넌트 state를 사용하려면 props로 알려줘야 함

  >> 부모 컴포넌트에선 <호출된자식컴포넌트> 태그에 속성으로 지정하여 state를 전송해줌 (일종의 파라미터 전달이라 생각하면 편함)
  >> 1. <호출컴포넌트 작명 = 전송state> 작명은 후에 key값이 됨 (참고로 직접 데이터 꽂기도 물론 가능한데 그렇게 하드코딩할거면 그냥 하위컴포에 박았겠지...)
     2. 하위 컴포넌트 의 파라미터로 function 컴포넌트명 (props) {} 의 파라미터 사용 (props의 모든 props 정보 담긴 Object) (props.작명)

     *. 반복문에 따라 배열 state 달라지는건 어떻게 지정?? 그냥 좀만 생각해도 후딱 알듯이 이에 따라 클릭시 지정될 state를 따로 만들면 되지


: Vue의 경우
    1. 마찬가지로 <자식컴포넌트> 속성으로 v-bind:작명 = 보낼state 한뒤
    2. 해당 컴포넌트 .vue파일에서  props:{작명:데이터타입} 으로 끌어온 뒤 사용한다


UI - Props 제작
1. UI 관련 중요 정보(on/off라던가)를 state로 저장한 뒤
2. state에 따라 UI가 수정되게 함
3. 컴포넌트 전송이 필요하면 해당 state를 props로


===========================================================================================================================================================

input 태그 값 임시 저장
input 태그, 해당 data state 준비

input 태그에 onChange or onInput 등에 데이터바인딩

참고로 (e)=>{}에서 입력값은 e.target.value >> e.target(현재 e가 발생하는 HTML요소, e만 log로 확인해보면 안다) .value는 바닐라에서 자주 쓰던 기본 함수

참고로 onInput, onChange (리액트에선 동작방식 같음 >> 입력마다 동작)
원래 바닐라에선 onInput은 입력순간마다 이벤트 발생 / onChange는 focus를 다른 곳으로 옮기는 순간에 발생


===========================================================================================================================================================

추가 : 반복문 key

for던 map으로 돌린 야매던 React반복문은 Vue처럼 사실 key를 지정해야함
반복이 돌아가는 최상단 <div>에 속성 key={}로 i등의 key가 될 변수를 넣어주면 됨